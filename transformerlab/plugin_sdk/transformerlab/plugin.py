# This file provides a library of methods that Transformer Lab Plugins can use

import os
import json
import sqlite3

# useful constants
WORKSPACE_DIR = os.getenv("_TFL_WORKSPACE_DIR")


def get_db_connection():
    """
    Returns an SQLite DB connection to the TransformerLab DB
    """
    dbfile = os.path.join(WORKSPACE_DIR, "llmlab.sqlite3")
    return sqlite3.connect(dbfile, isolation_level="DEFERRED")


def generate_model_json(model_id: str, architecture: str, 
                        model_filename: str = "", output_directory: str | None = None,
                        json_data: dict = {}):
    """
    The generates the json file needed for a model to be read in the models directory.

    model_id: ID of the model without author prefix. This will also be the directory the file is output to.
    architecture: A string that is used to determine which plugins support this model.
    filename: (Optional) A string representing model_filename or "" if none.
    output_directory: (Optional) The directory to output this file. Otherwise TLab models directory.
    json_data: (Default empty) A dictionary of values to add to the json_data of this model.

    Returns the object used to generate the JSON.
    """
    model_description = {
        "model_id": f"TransformerLab-mlx/{model_id}",
        "model_filename": model_filename,
        "name": model_id,
        "local_model": True,
        "json_data": {
            "uniqueID": f"TransformerLab-mlx/{model_id}",
            "name": model_id,
            "model_filename": model_filename,
            "description": "Generated by TransformerLab.",
            "source": "transformerlab",
            "architecture": architecture,
            "huggingface_repo": ""
        }
    }

    # Add and update any fields passed in json_data object
    # This overwrites anything defined above with values passed in
    model_description["json_data"].update(json_data)

    # Output the json to the file
    if not output_directory:
        output_directory = os.path.join(WORKSPACE_DIR, "models", model_id)
    with open(os.path.join(output_directory, "info.json"), "w") as outfile:
        json.dump(model_description, outfile)

    return model_description
